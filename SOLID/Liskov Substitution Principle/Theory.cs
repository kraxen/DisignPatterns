using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SOLID.Liskov_Substitution_Principle
{
    class Theory
    {
        //Должна быть возможность вместо базового типа подставить любой его подтип.

        //Предусловия(Preconditions) не могут быть усилены в подклассе.Другими словами подклассы не должны создавать 
        //больше предусловий, чем это определено в базовом классе, для выполнения некоторого поведения.
        //Предусловия представляют набор условий, необходимых для безошибочного выполнения метода.

        //Постусловия(Postconditions) не могут быть ослаблены в подклассе.То есть подклассы должны выполнять все постусловия, которые определены в базовом классе.
        //Постусловия проверяют состояние возвращаемого объекта на выходе из функции.

        //Инварианты(Invariants) — все условия базового класса - также должны быть сохранены и в подклассе.
        //Инварианты - это некоторые условия, которые остаются истинными на протяжении всей жизни объекта.Как правило, инварианты передают внутреннее состояние объекта.

        //Проблема решается в общем случае с помощью абстрагирования и выделения общего функционала, который уже наследуют классы.
        //То есть не один из них наследуется от другого, а оба они наследуются от одного общего класса.
    }
}
